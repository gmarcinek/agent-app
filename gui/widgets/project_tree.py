"""
Projekt Tree Widget z automatycznym od≈õwie≈ºaniem
"""
import os
from pathlib import Path
from textual.widgets import DirectoryTree
from textual.message import Message

class ProjectTree(DirectoryTree):
    """Drzewo projektu z automatycznym od≈õwie≈ºaniem"""
    DEFAULT_CSS = """
    ProjectTree {
        padding: 1 2;
    }
    """
    def __init__(self):
        # Ustaw domy≈õlny katalog na 'output' je≈õli istnieje, inaczej katalog g≈Ç√≥wny
        root_path = Path("output") if Path("output").exists() else Path(".")
        super().__init__(root_path)
        
        # Timer do automatycznego od≈õwie≈ºania co 3 sekundy
        self.auto_refresh_enabled = True
        
        # Wymu≈õ pokazanie root jako expandable
        self.show_root = True
    
    def on_mount(self):
        """Uruchom timer auto-refresh po zamontowaniu"""
        if self.auto_refresh_enabled:
            self.set_interval(3.0, self.auto_refresh)
    
    def auto_refresh(self):
        """Automatyczne od≈õwie≈ºanie zawarto≈õci drzewa"""
        try:
            # Sprawd≈∫ czy root path dalej istnieje
            if self.path.exists():
                # U≈ºyj wbudowanej metody reload()
                self.reload()
            else:
                # Je≈õli katalog nie istnieje, prze≈ÇƒÖcz na katalog g≈Ç√≥wny
                self.path = Path(".")
                self.reload()
        except Exception as e:
            # W przypadku b≈Çƒôdu, zatrzymaj auto-refresh
            self.app.notify(f"‚ö†Ô∏è Auto-refresh error: {e}", severity="warning")
    
    def on_directory_tree_file_selected(self, event):
        """Obs≈Çuga wyboru pliku"""
        from gui.events import FileOpenRequest
        # Wy≈õlij event do g≈Ç√≥wnej aplikacji - u≈ºywaj event.path zamiast tworzyƒá w≈Çasny
        self.post_message(FileOpenRequest(event.path))
    
    def toggle_auto_refresh(self):
        """Prze≈ÇƒÖcz auto-refresh on/off"""
        self.auto_refresh_enabled = not self.auto_refresh_enabled
        if self.auto_refresh_enabled:
            self.set_interval(1.0, self.auto_refresh)
            self.app.notify("‚úÖ Auto-refresh w≈ÇƒÖczony")
        else:
            self.app.notify("‚èπÔ∏è Auto-refresh wy≈ÇƒÖczony")
    
    def manual_refresh(self):
        """Rƒôczne od≈õwie≈ºenie"""
        try:
            self.reload()
            self.app.notify("üîÑ Drzewo od≈õwie≈ºone")
        except Exception as e:
            self.app.notify(f"‚ùå B≈ÇƒÖd od≈õwie≈ºania: {e}", severity="error")
    
    def set_root_path(self, path: str | Path):
        """Zmie≈Ñ katalog g≈Ç√≥wny drzewa"""
        new_path = Path(path)
        if new_path.exists() and new_path.is_dir():
            self.path = new_path
            self.reload()
            self.app.notify(f"üìÅ Katalog zmieniony na: {path}")
        else:
            self.app.notify(f"‚ùå Katalog nie istnieje: {path}", severity="error")
    
    def render_label(self, node, base_style, style):
        """Custom render z wyra≈∫nymi strza≈Çkami"""
        if node._allow_expand:
            # Dodaj wyra≈∫ne strza≈Çki
            arrow = "‚ñº " if node.is_expanded else "‚ñ∂ "
            folder_icon = "üìÇ" if node.is_expanded else "üìÅ"
            label = f"{arrow}{folder_icon} {node._label}"
        else:
            # Plik
            label = f"üìÑ {node._label}"
        
        from rich.text import Text
        return Text(label)