#!/usr/bin/env python3
"""
Synthetiser - warstwa syntezy metadanych w knowledge.json

G≈Ç√≥wny entry point dla synthetiser'a. Obserwuje katalog .meta/ i tworzy
skonsolidowanƒÖ bazƒô wiedzy w knowledge.json dla agenta programujƒÖcego.
"""

import sys
import argparse
from pathlib import Path
from typing import List, Optional

from .config import get_config, reload_config
from .watcher import start_meta_watcher
from .knowledge import KnowledgeBuilder


def setup_cli() -> argparse.ArgumentParser:
    """Konfiguruje CLI argumenty"""
    parser = argparse.ArgumentParser(
        description="Synthetiser - warstwa syntezy metadanych",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Przyk≈Çady u≈ºycia:
  poetry run synthetiser                    # Tryb watch (domy≈õlny)
  poetry run synthetiser --mode build       # Jednorazowe zbudowanie
  poetry run synthetiser --mode status      # Status knowledge.json
  poetry run synthetiser --debug           # Tryb debug
  poetry run synthetiser --config custom.json  # Custom config
        """
    )
    
    parser.add_argument(
        "--mode", 
        choices=["watch", "build", "status", "rebuild", "restore", "compare"],
        default="watch",
        help="Tryb dzia≈Çania (domy≈õlny: watch)"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="W≈ÇƒÖcz szczeg√≥≈Çowe logi debug"
    )
    
    parser.add_argument(
        "--config",
        type=Path,
        help="≈öcie≈ºka do custom pliku konfiguracji"
    )
    
    parser.add_argument(
        "--wait-timeout",
        type=int,
        default=30,
        help="Timeout oczekiwania na .meta/ w sekundach (domy≈õlny: 30)"
    )
    
    return parser


def mode_watch(args) -> int:
    """Tryb watch - obserwacja zmian w .meta/"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
        config.debug_info()
    
    print("üöÄ Synthetiser - tryb obserwacji")
    print(f"üìÇ Obserwowany katalog: {config.meta_dir}")
    print(f"üéØ Plik docelowy: {config.knowledge_file}")
    
    # Uruchom watcher
    watcher = start_meta_watcher(callback=on_knowledge_updated)
    
    if not watcher.is_running:
        print("‚ùå Nie uda≈Ço siƒô uruchomiƒá watchera")
        return 1
    
    try:
        print("üëÄ Obserwacja uruchomiona. Naci≈õnij Ctrl+C aby zatrzymaƒá.")
        watcher.wait_for_completion()
        return 0
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd w trybie watch: {e}")
        return 1


def mode_build(args) -> int:
    """Tryb build - jednorazowe zbudowanie knowledge.json"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
    
    print("üèóÔ∏è Synthetiser - tryb build")
    
    if not config.meta_dir.exists():
        print(f"‚ùå Katalog .meta nie istnieje: {config.meta_dir}")
        return 1
    
    try:
        builder = KnowledgeBuilder()
        knowledge = builder.build_full_knowledge()
        
        if builder.save_knowledge(knowledge):
            print("‚úÖ Zbudowano knowledge.json")
            
            # Poka≈º statystyki
            metadata = knowledge.get("metadata", {})
            print(f"üìä Statystyki:")
            print(f"  üìÑ Plik√≥w: {metadata.get('total_files', 0)}")
            print(f"  üè∑Ô∏è Symboli: {metadata.get('total_symbols', 0)}")
            print(f"  ‚è±Ô∏è Czas: {metadata.get('build_time_seconds', 0)}s")
            
            return 0
        else:
            print("‚ùå B≈ÇƒÖd zapisu knowledge.json")
            return 1
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd budowania: {e}")
        return 1


def mode_rebuild(args) -> int:
    """Tryb rebuild - przebudowa je≈õli potrzebna"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
    
    print("üîÑ Synthetiser - tryb rebuild")
    
    try:
        builder = KnowledgeBuilder()
        knowledge = builder.rebuild_if_needed()
        
        if builder.save_knowledge(knowledge):
            print("‚úÖ Knowledge.json sprawdzony/zaktualizowany")
            return 0
        else:
            print("‚ùå B≈ÇƒÖd zapisu knowledge.json")
            return 1
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd rebuild: {e}")
        return 1


def mode_status(args) -> int:
    """Tryb status - informacje o knowledge.json"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
    
    print("üìä Synthetiser - status")
    print(f"üìÇ Meta dir: {config.meta_dir}")
    print(f"üéØ Knowledge file: {config.knowledge_file}")
    
    # Sprawd≈∫ .meta/
    if config.meta_dir.exists():
        meta_files = list(config.meta_dir.rglob("*.json"))
        print(f"‚úÖ Katalog .meta istnieje ({len(meta_files)} plik√≥w JSON)")
    else:
        print("‚ùå Katalog .meta nie istnieje")
    
    # Sprawd≈∫ knowledge.json
    if config.knowledge_file.exists():
        try:
            builder = KnowledgeBuilder()
            knowledge = builder.load_existing_knowledge()
            
            if knowledge:
                metadata = knowledge.get("metadata", {})
                print(f"‚úÖ Knowledge.json istnieje:")
                print(f"  üìÑ Plik√≥w: {metadata.get('total_files', 0)}")
                print(f"  üè∑Ô∏è Symboli: {metadata.get('total_symbols', 0)}")
                print(f"  üïê Zbudowano: {metadata.get('built_at', 'nieznane')}")
                print(f"  üîÑ Ostatnia aktualizacja: {metadata.get('last_updated', 'brak')}")
                
                # Sprawd≈∫ aktualno≈õƒá
                if config.meta_dir.exists():
                    meta_files = list(config.meta_dir.rglob("*.json"))
                    if meta_files:
                        newest_meta = max(f.stat().st_mtime for f in meta_files)
                        knowledge_time = metadata.get('built_at', 0)
                        
                        if newest_meta > knowledge_time:
                            print("‚ö†Ô∏è Knowledge.json mo≈ºe byƒá nieaktualny")
                        else:
                            print("‚úÖ Knowledge.json jest aktualny")
            else:
                print("‚ùå Nie mo≈ºna wczytaƒá knowledge.json")
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd sprawdzania knowledge.json: {e}")
    else:
        print("‚ùå Knowledge.json nie istnieje")
    
    return 0


def mode_restore(args) -> int:
    """Tryb restore - przywracanie z backup"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
    
    print("üîÑ Synthetiser - tryb restore")
    
    try:
        builder = KnowledgeBuilder()
        success = builder.restore_from_backup()
        
        if success:
            print("‚úÖ Przywr√≥cono knowledge z backup")
            return 0
        else:
            return 1
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd restore: {e}")
        return 1


def mode_compare(args) -> int:
    """Tryb compare - por√≥wnanie ze startup"""
    config = get_config()
    
    if args.debug:
        config.set("debug", True)
    
    print("üìä Synthetiser - por√≥wnanie ze startem")
    
    try:
        builder = KnowledgeBuilder()
        comparison = builder.compare_with_startup()
        
        if "error" in comparison:
            print(f"‚ùå {comparison['error']}")
            return 1
        
        print(f"üìà Zmiany od startu:")
        print(f"  üìÑ Pliki: {comparison['files_changed']:+d}")
        print(f"  üè∑Ô∏è Symbole: {comparison['symbols_changed']:+d}")
        print(f"  ‚è±Ô∏è Runtime: {comparison['runtime_seconds']:.1f}s")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd por√≥wnania: {e}")
        return 1


def on_knowledge_updated(changed_files: List[str]):
    """
    Callback wywo≈Çywany po ka≈ºdej aktualizacji knowledge
    
    Args:
        changed_files: Lista plik√≥w kt√≥re zosta≈Çy zmienione
    """
    config = get_config()
    
    if config.get("debug"):
        print(f"üîî Knowledge zaktualizowany na podstawie {len(changed_files)} plik√≥w")
    
    # Tutaj mo≈ºna dodaƒá dodatkowƒÖ logikƒô, np.:
    # - Powiadomienia
    # - Webhooks
    # - Metrics
    # - Hot reload dla innych komponent√≥w


def main() -> int:
    """G≈Ç√≥wna funkcja entry point"""
    parser = setup_cli()
    args = parser.parse_args()
    
    # Za≈Çaduj custom config je≈õli podany
    if args.config:
        if not args.config.exists():
            print(f"‚ùå Plik konfiguracji nie istnieje: {args.config}")
            return 1
        
        # Reload config z custom path
        reload_config()
        config = get_config()
        config.config_file = args.config
        config.config = config._load_config()
    
    # Ustaw debug je≈õli podany
    if args.debug:
        config = get_config()
        config.set("debug", True)
    
    # Wybierz tryb dzia≈Çania
    mode_handlers = {
        "watch": mode_watch,
        "build": mode_build,
        "rebuild": mode_rebuild,
        "status": mode_status,
        "restore": mode_restore,
        "compare": mode_compare
    }
    
    handler = mode_handlers.get(args.mode)
    if not handler:
        print(f"‚ùå Nieznany tryb: {args.mode}")
        return 1
    
    try:
        return handler(args)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Przerwano przez u≈ºytkownika")
        return 0
    except Exception as e:
        print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        return 1


def watch_loop():
    """Kompatybilno≈õƒá wsteczna - stary entry point"""
    print("‚ö†Ô∏è Uwaga: watch_loop() jest deprecated, u≈ºyj main()")
    sys.argv = ["synthetiser", "--mode", "watch"]
    return main()


if __name__ == "__main__":
    sys.exit(main())